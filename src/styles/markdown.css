/* Space around sections */
:not(h1, h2, h3, h4, h5, h6)+ :is(h1, h2, h3, h4, h5, h6):not(:where(.not-content *)),
:not(a, strong, em, del, span, input, code)+hr:not(:where(.not-content *)),
hr:not(:where(.not-content *))+ :not(a, strong, em, del, span, input, code, :where(.not-content *)) {
  margin-top: calc(var(--paragraph-spacing) + 2rem);
}

/**
 * Code blocks
 */
@media (prefers-color-scheme: dark) {

  .astro-code,
  .astro-code span {
    color: var(--shiki-dark) !important;
    background-color: var(--shiki-dark-bg) !important;
  }
}

/* Space around asides and code blocks */
:not(a, strong, em, del, span, input, code)+ :is(.expressive-code) {
  margin-top: calc(var(--paragraph-spacing) + 0.4375rem);
}

:is(.expressive-code)+ :is(.expressive-code) {
  margin-top: calc(var(--paragraph-spacing) + 1.125rem);
}

/* Plain blocks */
.expressive-code .frame:not(.has-title):not(.is-terminal) pre {
  border-color: var(--z-color-white);
  border-radius: 0;
  background-color: transparent
}

.expressive-code .copy {
  inset-block-start: calc(var(--ec-brdWd) + var(--button-spacing) + .1rem)
}

.expressive-code .copy .feedback {
  --tooltip-bg: var(--z-color-gray-3);
  font-size: .75rem;
  line-height: 1;
  padding: .375rem .5rem;
  text-transform: uppercase;
  letter-spacing: .5px
}

.expressive-code .copy button {
  width: 2rem;
  height: 2rem;
  border-radius: 0;
  background-color: var(--z-color-bg);

  &:before {
    opacity: 1;
    border-color: var(--z-color-white)
  }

  & div {
    background-color: transparent
  }
}

@media (hover: hover) {

  .expressive-code .frame:hover .copy button:not(:hover),
  .expressive-code .frame:focus-within :focus-visible~.copy button:not(:hover),
  .expressive-code .frame .copy .feedback.show~button:not(:hover) {
    opacity: 1
  }
}

.expressive-code .frame.has-title:not(.is-terminal) .header {
  background: transparent;
  border-bottom: 1px solid var(--z-color-white);
  border-radius: 0
}

.expressive-code .frame.has-title:not(.is-terminal) .header:before {
  border-color: var(--z-color-white)
}

.expressive-code .frame.has-title:not(.is-terminal) .title {
  border-width: 1px 1px 0;
  border-style: solid;
  font-size: var(--z-text-sm);
  background: transparent;
  border-radius: 0;
  border-color: var(--z-color-white) var(--z-color-white) transparent
}

.expressive-code .frame.has-title:not(.is-terminal) .title:after {
  border: none
}

.expressive-code .frame pre {
  background: transparent
}

.expressive-code .frame.has-title pre {
  border-color: var(--z-color-white)
}

.expressive-code .frame.is-terminal .header {
  font-size: var(--z-text-sm);
  font-weight: 400;
  border-radius: 0;
  background: transparent;
  border-color: var(--z-color-white)
}

.expressive-code .frame.is-terminal .header:after {
  border-color: var(--z-color-white)
}

.expressive-code .frame.is-terminal pre {
  border-color: var(--z-color-white)
}

.expressive-code .frame,
.frame {
  --ec-tm-markBg: light-dark(#00000011, #ffffff0f);
  --ec-tm-insBg: light-dark(#90c87e72, #1e561572);
  --ec-tm-delBg: light-dark(#ff9c8f7f, #862d2766);
}

.expressive-code .ec-line.mark>.code,
.expressive-code .ec-line.ins>.code,
.expressive-code .ec-line.del>.code {
  border-inline-start-color: transparent
}

.expressive-code .ec-line mark:before,
.expressive-code .ec-line ins:before,
.expressive-code .ec-line del:before {
  border-width: 0px
}
